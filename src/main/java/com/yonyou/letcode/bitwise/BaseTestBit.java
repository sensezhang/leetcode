package com.yonyou.letcode.bitwise;

/**
 * @Author: zhangwbin
 * @Date: 2020/7/6
 */
public class BaseTestBit {

  public static void main(String[] args) {
    // 将i的右边4位清0
    int i = 255;
    // ~0 = ....11111111111111    ~0<<4=....111110000
    System.out.println(~0<<4);
    // 11111111 & 111111111110000 = 11110000
    System.out.println(i & (~0<<4));
    //  获取x 的第 n 位值（0 或者1）
    // 00001111 & 1 = 1
    System.out.println((i >> 4) & 1);

    // 获取x 的第 n 位的幂值
    // 11111111 & 10000 = 00010000 = 16
    System.out.println(i & (1 <<4));

    // 仅将第 n 位 置为0
    // 1<<4=00010000; ~(-1<<4) = 11101111; 11111111&11101111
    int s = i & (~(1 << 4));
    System.out.println(s);

    // 仅将第 n 位 置为1
    // 1<<4 = 00010000; 11101111 | 00010000 = 11111111
    System.out.println(s | (1<<4));

    // 将 x 最高位至第 n 位（含）清零  x & ((1<<n) - 1)或 x&(~(~0<<n))
    // 1<<4 = 00010000; 00010000 - 1 = 00001111; 11111111 & 00001111= 00001111
    // 1111111111 << 4 =  11111110000; 0000000001111; 11111111 & 000000001111 = 00001111
    System.out.println(i & ((1 << 4) -1));
    System.out.println(i & (~(~0<<4)));

    // 将第 n 位至第0 位（含）清零：x& (~ ((1 << (n + 1)) -1)) 或 x&((~0<<n+1))
    // (1 << 5) = 100000; 100000 - 1 = 011111; ~000011111 = 111100000; 11111111 & 1111100000 = 000011100000
    // 111111111111 << 5 = 11111111100000; 11111111 & 111111100000 = 11100000;
    System.out.println(i & (~ ((1 << (4 + 1)) -1)));
    System.out.println(i & (~ 0 << (4 + 1)));

    // 奇偶判断 x % 2 == 1 —> (x & 1) == 1
    // x % 2 == 0 —> (x & 1) == 0
    System.out.println(i & 1);

    //x >> 1 —> x / 2. 移位运算，括号尖朝向哪边就往哪边移动
    System.out.println(i >> 1);

    // X = X & (X-1) 清零最低位的 1
    // 11110000 & (11110000 - 1) = 11110000 & 11101111 = 11100000
    System.out.println(240 & (240-1));

    // X & -X => 得到最低位的 1 (-x = ~(x - 1))
    // 11110000 &  1111 1111 0001 0000‬ = 0000
    System.out.println(240 & -240);
    System.out.println(240 & (~(240 - 1)));

    // X & ~X => 0
    System.out.println(i & (~i));
  }
}
